RELBASE: ./vendor/odoo/cc


# odoo/cli/scaffold.py - [PATCH] [IMP] scaffold: add cli convenience dialogue
# Incorporates:			 [PATCH] [IMP] scaffold: add json parameter to pass env
https://github.com/xoe-labs/odoo-dev/compare/master...xoe-labs:master-NOPR-add-cli-dialogue-to-scaffolding.patch

From 99f2f5e757458f1b437e4a2b13bb81305404419f Mon Sep 17 00:00:00 2001
From: David Arnold <dar@xoe.solutions>
Date: Mon, 20 Aug 2018 13:15:36 -0500
Subject: [PATCH 1/2] [IMP] scaffold: add json parameter to pass env

Define a standard personal json file to be passed to the template rendering.

This is useful to seed author or company data or the like.
---
 odoo/cli/scaffold.py | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/odoo/cli/scaffold.py b/odoo/cli/scaffold.py
index 53d3b8df85af3..01678b27e5976 100644
--- a/odoo/cli/scaffold.py
+++ b/odoo/cli/scaffold.py
@@ -5,6 +5,7 @@
 import os
 import re
 import sys
+import json

 import jinja2

@@ -24,6 +25,10 @@ def run(self, cmdargs):
             '-t', '--template', type=template, default=template('default'),
             help="Use a custom module template, can be a template name or the"
                  " path to a module template (default: %(default)s)")
+        parser.add_argument(
+            '-j', '--json', type=json.loads, default='{}',
+            help="Load a parameters json dict that will be passed to the"
+                 " jinja2 environment (default: %(default)s)")
         parser.add_argument('name', help="Name of the module to create")
         parser.add_argument(
             'dest', default='.', nargs='?',
@@ -33,10 +38,12 @@ def run(self, cmdargs):
             sys.exit(parser.print_help())
         args = parser.parse_args(args=cmdargs)

+        params = {'name': args.name}
+        params.update(args.json)
         args.template.render_to(
             snake(args.name),
             directory(args.dest, create=True),
-            {'name': args.name})
+            params)

     def epilog(self):
         return "Built-in templates available are: %s" % ', '.join(

From e928fcda5731478f66f3872d1848e8a1b91dc16b Mon Sep 17 00:00:00 2001
From: David Arnold <dar@xoe.solutions>
Date: Mon, 20 Aug 2018 13:30:48 -0500
Subject: [PATCH 2/2] [IMP] scaffold: add cli convenience dialogue

This commit remembers the available category and license options for you and
lets you choose with a very basic cli selection interface.
---
 odoo/cli/scaffold.py | 62 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 62 insertions(+)

diff --git a/odoo/cli/scaffold.py b/odoo/cli/scaffold.py
index 01678b27e5976..589a95d467bcc 100644
--- a/odoo/cli/scaffold.py
+++ b/odoo/cli/scaffold.py
@@ -9,11 +9,71 @@

 import jinja2

+try:
+    from pick import pick
+except:
+    pick = None
+
+# See /base/module/module_data.xml
+MODULE_CATEGORIES = [
+    'Accounting',
+    'Discuss',
+    'Document Management',
+    'eCommerce',
+    'Human Resources',
+    'Industries',
+    'Localization',
+    'Manufacturing',
+    'Marketing',
+    'Point of Sale',
+    'Productivity',
+    'Project',
+    'Purchases',
+    'Sales',
+    'Warehouse',
+    'Website',
+    'Extra Tools',
+    'Hidden',
+]
+# See /base/module/module.py
+MODULE_LICENCES = [
+    'GPL-2',
+    'GPL-2 or any later version',
+    'GPL-3',
+    'GPL-3 or any later version',
+    'AGPL-3',
+    'LGPL-3',
+    'Other OSI approved licence',
+    'OEEL-1',
+    'OPL-1',
+    'Other proprietary',
+]
+
 from . import Command

 class Scaffold(Command):
     """ Generates an Odoo module skeleton. """

+    def _dialogue(self):
+        options = {}
+        summary = input("Write a short summary (optional): ")
+        if summary:
+            options['summary'] = summary
+        description = input("Write a description (optional): ")
+        if description:
+            options['description'] = description
+        if pick:
+            title = 'Choose the module category: '
+            # See /base/module/module_data.xml
+            selection = MODULE_CATEGORIES
+            options['category'], _ = pick(selection, title)
+            title = 'Choose the module license: '
+            # See /base/module/module.py
+            selection = MODULE_LICENCES
+            options['license'], _ = pick(selection, title)
+        return options
+
+
     def run(self, cmdargs):
         # TODO: bash completion file
         parser = argparse.ArgumentParser(
@@ -37,9 +97,11 @@ def run(self, cmdargs):
         if not cmdargs:
             sys.exit(parser.print_help())
         args = parser.parse_args(args=cmdargs)
+        options = self._dialogue()

         params = {'name': args.name}
         params.update(args.json)
+        params.update(options)
         args.template.render_to(
             snake(args.name),
             directory(args.dest, create=True),