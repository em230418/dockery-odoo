RELBASE: ./vendor/odoo/cc


# odoo/netsvc.py - [PATCH] [IMP] netsvc: add json logging capa on non tty
https://github.com/xoe-labs/odoo-dev/compare/12.0...xoe-labs:12.0-NOPR-add-json-logging-on-non-tty.patch

From 04e3d8d1a6e105d8e6378f192f84f07a13f75051 Mon Sep 17 00:00:00 2001
From: David Arnold <dar@xoe.solutions>
Date: Mon, 20 Aug 2018 12:41:55 -0500
Subject: [PATCH] [IMP] netsvc: add json logging capa on non tty

This commit introduces json loggin capability if `pythonksonlogger` lib is
present on non tty stderr.

Ths is useful for log aggregation and easier parsing. Especially it handles
multiline logs a lot more gracefully.

Main advantage: removes the need for log buffers and potentially error prone
multiline parsing.

Signed-off-by: "David Arnold" <"dar@xoe.solutions">
---
 odoo/netsvc.py       | 19 +++++++++++++++++++
 odoo/tools/config.py |  5 ++++-
 2 files changed, 23 insertions(+), 1 deletion(-)

diff --git a/odoo/netsvc.py b/odoo/netsvc.py
index 286ee740584cb..7da7e84621aa1 100644
--- a/odoo/netsvc.py
+++ b/odoo/netsvc.py
@@ -17,6 +17,11 @@
 from . import sql_db
 from . import tools

+try:
+    from pythonjsonlogger import jsonlogger
+except ImportError:
+    jsonlogger = None
+
 _logger = logging.getLogger(__name__)

 def log(logger, level, prefix, msg, depth=None):
@@ -112,6 +117,17 @@ def format(self, record):
         record.levelname = COLOR_PATTERN % (30 + fg_color, 40 + bg_color, record.levelname)
         return DBFormatter.format(self, record)

+if jsonlogger:
+    class JSONFormatter(jsonlogger.JsonFormatter):
+        def formatException(self, exc_info):
+            result = super(JSONFormatter, self).formatException(exc_info)
+            # Also provide the error's class & module name in a parseable way
+            return exc_info[0].__module__ + '.' + exc_info[0].__name__ + ' >>>> ' + result
+        def format(self, record):
+            record.pid = os.getpid()
+            record.dbname = getattr(threading.currentThread(), 'dbname', '?')
+            return jsonlogger.JsonFormatter.format(self, record)
+
 _logger_init = False
 def init_logger():
     global _logger_init
@@ -182,6 +198,9 @@ def is_a_tty(stream):
     if os.name == 'posix' and isinstance(handler, logging.StreamHandler) and is_a_tty(handler.stream):
         formatter = ColoredFormatter(format)
         perf_filter = ColoredPerfFilter()
+    elif jsonlogger and tools.config['logjson']:
+        formatter = JSONFormatter(format)
+        perf_filter = PerfFilter()
     else:
         formatter = DBFormatter(format)
         perf_filter = PerfFilter()
diff --git a/odoo/tools/config.py b/odoo/tools/config.py
index e9a1d388e1f10..6780dcf681c81 100644
--- a/odoo/tools/config.py
+++ b/odoo/tools/config.py
@@ -167,6 +167,7 @@ def __init__(self, fname=None):
         # Logging Group
         group = optparse.OptionGroup(parser, "Logging Configuration")
         group.add_option("--logfile", dest="logfile", help="file where the server log will be stored")
+        group.add_option("--logjson", dest="logjson", action="store_true", my_default=False, help="output logs in json format")
         group.add_option("--logrotate", dest="logrotate", action="store_true", my_default=False, help="enable logfile rotation")
         group.add_option("--syslog", action="store_true", dest="syslog", my_default=False, help="Send the log to the syslog server")
         group.add_option('--log-handler', action="append", default=[], my_default=DEFAULT_LOG_HANDLER, metavar="PREFIX:LEVEL", help='setup a handler at LEVEL for a given PREFIX. An empty PREFIX indicates the root logger. This option can be repeated. Example: "odoo.orm:DEBUG" or "werkzeug:CRITICAL" (default: ":INFO")')
@@ -391,6 +392,8 @@ def die(cond, msg):
         # Verify that we want to log or not, if not the output will go to stdout
         if self.options['logfile'] in ('None', 'False'):
             self.options['logfile'] = False
+        if self.options['logjson'] in ('None', 'False'):
+            self.options['logjson'] = False
         # the same for the pidfile
         if self.options['pidfile'] in ('None', 'False'):
             self.options['pidfile'] = False
@@ -404,7 +407,7 @@ def die(cond, msg):
         # if defined do not take the configfile value even if the defined value is None
         keys = ['http_interface', 'http_port', 'longpolling_port', 'http_enable',
                 'db_name', 'db_user', 'db_password', 'db_host', 'db_sslmode',
-                'db_port', 'db_template', 'logfile', 'pidfile', 'smtp_port',
+                'db_port', 'db_template', 'logfile', 'logjson', 'pidfile', 'smtp_port',
                 'email_from', 'smtp_server', 'smtp_user', 'smtp_password',
                 'db_maxconn', 'import_partial', 'addons_path',
                 'syslog', 'without_demo',
